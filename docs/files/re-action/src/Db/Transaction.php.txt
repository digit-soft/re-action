<?php

namespace Reaction\Db;

use Reaction;
use Reaction\Base\BaseObject;
use Reaction\Exceptions\Exception;
use Reaction\Exceptions\InvalidConfigException;
use Reaction\Promise\ExtendedPromiseInterface;
use Reaction\Promise\LazyPromiseInterface;

/**
 * Transaction represents a DB transaction.
 *
 * It is usually created by calling [[Connection::beginTransaction()]].
 *
 * The following code is a typical example of using transactions (note that some
 * DBMS may not support transactions):
 *
 * ```php
 * $transaction = $connection->beginTransaction();
 * try {
 *     $connection->createCommand($sql1)->execute();
 *     $connection->createCommand($sql2)->execute();
 *     //.... other SQL executions
 *     $transaction->commit();
 * } catch (\Exception $e) {
 *     $transaction->rollBack();
 *     throw $e;
 * } catch (\Throwable $e) {
 *     $transaction->rollBack();
 *     throw $e;
 * }
 * ```
 *
 * > Note: in the above code we have two catch-blocks for compatibility
 * > with PHP 5.x and PHP 7.x. `\Exception` implements the [`\Throwable` interface](http://php.net/manual/en/class.throwable.php)
 * > since PHP 7.0, so you can skip the part with `\Exception` if your app uses only PHP 7.0 and higher.
 *
 * @property bool $isActive Whether this transaction is active. Only an active transaction can [[commit()]] or
 * [[rollBack()]]. This property is read-only.
 * @property string $isolationLevel The transaction isolation level to use for this transaction. This can be
 * one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but also a string
 * containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`. This property is
 * write-only.
 * @property int $level The current nesting level of the transaction. This property is read-only.
 */
class Transaction extends BaseObject implements TransactionInterface, DbConnectionGetterInterface
{
    /**
     * @var DatabaseInterface the database connection that this transaction is associated with.
     */
    public $db;

    /**
     * @var ConnectionInterface Dedicated DB connection for transaction
     */
    protected $connection;

    /**
     * @var int the nesting level of the transaction. 0 means the outermost level.
     */
    private $_level = 0;


    /**
     * Returns a value indicating whether this transaction is active.
     * @return bool whether this transaction is active. Only an active transaction
     * can [[commit()]] or [[rollBack()]].
     */
    public function getIsActive()
    {
        return $this->_level > 0 && $this->db;
    }

    /**
     * Begins a transaction.
     * @param string|null $isolationLevel The [isolation level][] to use for this transaction.
     * This can be one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but
     * also a string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`.
     * If not specified (`null`) the isolation level will not be set explicitly and the DBMS default will be used.
     *
     * > Note: This setting does not work for PostgreSQL, where setting the isolation level before the transaction
     * has no effect. You have to call [[setIsolationLevel()]] in this case after the transaction has started.
     *
     * > Note: Some DBMS allow setting of the isolation level only for the whole connection so subsequent transactions
     * may get the same isolation level even if you did not specify any. When using this feature
     * you may need to set the isolation level for all transactions explicitly to avoid conflicting settings.
     * At the time of this writing affected DBMS are MSSQL and SQLite.
     *
     * [isolation level]: http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels
     * @return ExtendedPromiseInterface|LazyPromiseInterface
     */
    public function begin($isolationLevel = null)
    {
        if ($this->db === null) {
            $exception = new InvalidConfigException('Transaction::db must be set.');
            return Reaction\Promise\reject($exception);
        }

        $connection = $this->getConnection();

        if ($this->_level === 0) {
            $isolationLevel = isset($isolationLevel) ? $isolationLevel : self::READ_COMMITTED;
            Reaction::debug('Begin transaction' . ($isolationLevel ? ' with isolation level ' . $isolationLevel : ''));
            $this->_level = 1;
            $promise = $connection->beginTransaction($isolationLevel);
        } else {
            $schema = $this->db->getSchema();
            if ($schema->supportsSavepoint()) {
                Reaction::debug('Set savepoint ' . $this->_level);
                $promise = $connection->createSavepoint('LEVEL' . $this->_level);
            } else {
                Reaction::info('Transaction not started: nested transaction not supported');
            }
            $this->_level++;
        }

        if (!isset($promise)) {
            return Reaction\Promise\rejectLazy(null);
        }

        $callback = function() { return $this->getConnection(); };

        return $promise instanceof LazyPromiseInterface ? $promise->thenLazy($callback) : $promise->then($callback);
    }

    /**
     * Commits a transaction.
     * @throws Exception if the transaction is not active
     * @return ExtendedPromiseInterface|LazyPromiseInterface
     */
    public function commit()
    {
        if (!$this->getIsActive()) {
            throw new Exception('Failed to commit transaction: transaction was inactive.');
        }

        $connection = $this->getConnection();
        $this->_level--;
        if ($this->_level === 0) {
            Reaction::debug('Commit transaction');
            return $connection->commitTransaction()
                ->thenLazy(function() { $this->closeConnection(); });
        }

        $schema = $this->db->getSchema();
        if ($schema->supportsSavepoint()) {
            Reaction::debug('Release savepoint ' . $this->_level);
            return $connection->releaseSavepoint('LEVEL' . $this->_level);
        } else {
            Reaction::info('Transaction not committed: nested transaction not supported');
        }
        return Reaction\Promise\rejectLazy(null);
    }

    /**
     * Rolls back a transaction.
     * @param bool $final
     * @return ExtendedPromiseInterface
     */
    public function rollBack($final = false)
    {
        if (!$this->getIsActive()) {
            // do nothing if transaction is not active: this could be the transaction is committed
            // but the event handler to "commitTransaction" throw an exception
            return Reaction\Promise\reject(new Exception("There is no active transactions"));
        }

        //Roll back all transaction with save points
        if ($final && $this->_level > 1) {
            $promises = [];
            while ($this->_level > 0) {
                $promises[] = $this->rollBack(false);
            }
            return !empty($promises)
                ? Reaction\Promise\allInOrder($promises)->then(function() { return true; })
                : Reaction\Promise\resolve(true);
        }

        $connection = $this->getConnection();
        $this->_level--;
        if ($this->_level === 0) {
            Reaction::debug('Roll back transaction');
            return $connection->rollBackTransaction()
                ->thenLazy(function() { $this->closeConnection(); });
        }

        $schema = $this->db->getSchema();
        if ($schema->supportsSavepoint()) {
            Reaction::debug('Roll back to savepoint ' . $this->_level);
            return $connection->rollBackSavepoint('LEVEL' . $this->_level);
        } else {
            Reaction::info('Transaction not rolled back: nested transaction not supported');
            // throw an exception to fail the outer transaction
            return Reaction\Promise\reject(new Exception('Roll back failed: nested transaction not supported.'));
        }
    }

    /**
     * Sets the transaction isolation level for this transaction.
     *
     * This method can be used to set the isolation level while the transaction is already active.
     * However this is not supported by all DBMS so you might rather specify the isolation level directly
     * when calling [[begin()]].
     * @param string $level The transaction isolation level to use for this transaction.
     * This can be one of [[READ_UNCOMMITTED]], [[READ_COMMITTED]], [[REPEATABLE_READ]] and [[SERIALIZABLE]] but
     * also a string containing DBMS specific syntax to be used after `SET TRANSACTION ISOLATION LEVEL`.
     * @return ExtendedPromiseInterface|LazyPromiseInterface
     * @throws Exception if the transaction is not active
     * @see http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels
     */
    public function setIsolationLevel($level)
    {
        if (!$this->getIsActive()) {
            throw new Exception('Failed to set isolation level: transaction was inactive.');
        }
        Reaction::debug('Setting transaction isolation level to ' . $level);
        return $this->getConnection()->setTransactionIsolationLevel($level);
    }

    /**
     * @return int The current nesting level of the transaction.
     */
    public function getLevel()
    {
        return $this->_level;
    }

    /**
     * Get DB connection
     * @return ConnectionInterface
     */
    public function getConnection() {
        if (!isset($this->connection)) {
            $this->connection = $this->db->getDedicatedConnection();
        }
        return $this->connection;
    }

    /**
     * Close connection at transaction end
     */
    protected function closeConnection()
    {
        $this->connection->close();
        $this->connection = null;
    }

    /**
     * Get Database if applicable
     * @see DbConnectionGetterInterface
     * @return DatabaseInterface|null
     */
    public function getDb()
    {
        return $this->db;
    }
}

